@using System.Web.Mvc
@using System.Web.Mvc.Html
@using System.Web.Routing
@using Orchard.Mvc.Html
@{
    var routeData = new RouteValueDictionary(ViewContext.RouteData.Values);
    var queryString = ViewContext.HttpContext.Request.QueryString;
    if (queryString != null) {
        foreach (string key in queryString.Keys) {
            if (key != null && !routeData.ContainsKey(key)) {
                var value = queryString[key];
                routeData[key] = queryString[key];
            }
        }
    }

    if (routeData.ContainsKey("id") && !HasText(routeData["id"])) {
        routeData.Remove("id");
    }

    // HACK: MVC 3 is adding a specific value in System.Web.Mvc.Html.ChildActionExtensions.ActionHelper
    // when a content item is set as home page, it is rendered by using Html.RenderAction, and the routeData is altered
    // This code removes this extra route value
    var removedKeys = routeData.Keys.Where(key => routeData[key] is DictionaryValueProvider<object>).ToList();
    foreach(string key in removedKeys) {
        routeData.Remove(key);
    }

    var result = Model.TotalItemCount % Model.PageSize;
    var numberOfPages = 0;
    if (result == 0) {
      numberOfPages = Model.TotalItemCount / Model.PageSize;
    }
	else {
      numberOfPages = Model.TotalItemCount / Model.PageSize + 1;
    }
    
    var hasNextPage = numberOfPages > 1;

    List<string> actionLinks = new List<string>();
    IDictionary<string, object> htmlAttributes = new Dictionary<string, object>();
    if (Model.Page == 1) {
        htmlAttributes.Add("class", "current");
    }
    actionLinks.Add(Html.ActionLink(T("1").ToString(), (string)routeData["action"], (string)routeData["controller"], null, htmlAttributes).ToString());
    for (int i = 1; i < numberOfPages; i++) {
        routeData["page"] = i + 1;
        htmlAttributes.Clear();
        if (Model.Page == i + 1) {
            htmlAttributes.Add("class", "current");
        }
        var link = Html.ActionLink(T((i + 1).ToString()).ToString(), (string)routeData["action"], (string)routeData["controller"], routeData, htmlAttributes).ToString();
        actionLinks.Add(link);
    }
}
@if (hasNextPage) {
    <div class="pagerText">@T("Page:")</div> @Html.UnorderedList(actionLinks, (s, i) => MvcHtmlString.Create(s), "group pager");
}